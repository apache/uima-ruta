/* The following code was generated by JFlex 1.4.3 on 04.11.14 14:02 */

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */


package org.apache.uima.ruta.seed;
import java.util.*;
import java.util.regex.*;

import org.apache.uima.cas.text.AnnotationFS;
import org.apache.uima.jcas.JCas;

import org.apache.uima.ruta.type.AMP;
import org.apache.uima.ruta.type.BREAK;
import org.apache.uima.ruta.type.CAP;
import org.apache.uima.ruta.type.COLON;
import org.apache.uima.ruta.type.COMMA;
import org.apache.uima.ruta.type.CW;
import org.apache.uima.ruta.type.EXCLAMATION;
import org.apache.uima.ruta.type.MARKUP;
import org.apache.uima.ruta.type.NBSP;
import org.apache.uima.ruta.type.NUM;
import org.apache.uima.ruta.type.PERIOD;
import org.apache.uima.ruta.type.QUESTION;
import org.apache.uima.ruta.type.SEMICOLON;
import org.apache.uima.ruta.type.SPACE;
import org.apache.uima.ruta.type.SPECIAL;
import org.apache.uima.ruta.type.SW;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 04.11.14 14:02 from the specification file
 * <tt>D:/work/workspace-uima-ruta5/ruta/ruta-core/src/main/java/org/apache/uima/ruta/seed/SeedLexer.flex</tt>
 */
class SeedLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\4\1\3\1\4\2\0\1\4\22\0\1\3\1\7\4\0"+
    "\1\12\5\0\1\25\1\0\1\26\1\6\12\2\1\24\1\17\1\5"+
    "\1\0\1\10\1\27\1\0\1\1\1\21\13\1\1\20\1\1\1\23"+
    "\2\1\1\22\7\1\6\0\1\31\1\14\13\31\1\13\1\31\1\16"+
    "\2\31\1\15\7\31\45\0\1\11\11\0\1\30\12\0\1\30\4\0"+
    "\1\30\5\0\27\32\1\0\7\32\30\30\1\0\10\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\2\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\2\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\2\32\1\30\1\32\1\30"+
    "\1\32\3\30\2\32\1\30\1\32\1\30\2\32\1\30\3\32\2\30"+
    "\4\32\1\30\2\32\1\30\3\32\3\30\2\32\1\30\2\32\1\30"+
    "\1\32\1\30\1\32\1\30\2\32\1\30\1\32\2\30\1\32\1\30"+
    "\2\32\1\30\3\32\1\30\1\32\1\30\2\32\2\30\1\0\1\32"+
    "\3\30\4\0\1\32\1\0\1\30\1\32\1\0\1\30\1\32\1\0"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\2\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\2\30\1\32\1\0\1\30\1\32\1\30"+
    "\3\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\7\30"+
    "\2\32\1\30\2\32\2\30\1\32\1\30\4\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\105\30\1\0\44\30\7\0\2\30"+
    "\36\0\5\30\140\0\1\30\52\0\1\32\1\30\1\32\1\30\2\0"+
    "\1\32\1\30\2\0\4\30\10\0\1\32\1\0\3\32\1\0\1\32"+
    "\1\0\2\32\1\30\21\32\1\0\11\32\43\30\1\32\2\30\3\32"+
    "\3\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\5\30\1\32\1\30\1\0\1\32\1\30"+
    "\2\32\2\30\63\32\60\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\10\0\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\2\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\2\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\11\0\46\32\12\0\47\30\u0b18\0"+
    "\46\32\1\0\1\32\5\0\1\32\u0740\0\1\11\u04f1\0\300\30\100\0"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\11\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\11\30\10\32\6\30"+
    "\2\0\6\32\2\0\10\30\10\32\10\30\10\32\6\30\2\0\6\32"+
    "\2\0\10\30\1\0\1\32\1\0\1\32\1\0\1\32\1\0\1\32"+
    "\10\30\10\32\16\30\2\0\10\30\10\0\10\30\10\0\10\30\10\0"+
    "\5\30\1\0\2\30\4\32\2\0\1\30\3\0\3\30\1\0\2\30"+
    "\4\32\4\0\4\30\2\0\2\30\4\32\4\0\10\30\5\32\5\0"+
    "\3\30\1\0\2\30\4\32\13\0\1\11\47\0\1\11\101\0\1\30"+
    "\15\0\1\30\20\0\15\30\145\0\1\32\4\0\1\32\2\0\1\30"+
    "\3\32\2\30\3\32\1\30\1\0\1\32\3\0\5\32\6\0\1\32"+
    "\1\0\1\32\1\0\1\32\1\0\4\32\1\0\1\30\4\32\1\30"+
    "\4\0\1\30\2\0\2\30\2\32\5\0\1\32\4\30\4\0\1\30"+
    "\21\0\20\32\20\30\3\0\1\32\1\30\u0331\0\32\32\32\30\u0716\0"+
    "\57\32\1\0\57\30\1\0\1\32\1\30\3\32\2\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\4\32\1\30\1\32\2\30\1\32\10\30"+
    "\3\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\2\30"+
    "\6\0\1\32\1\30\1\32\1\30\3\0\1\32\1\30\14\0\46\30"+
    "\1\0\1\30\5\0\1\30\u7912\0\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\22\0\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\212\0\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\3\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32"+
    "\1\30\1\32\12\30\1\32\1\30\1\32\1\30\2\32\1\30\1\32"+
    "\1\30\1\32\1\30\1\32\1\30\1\32\1\30\3\0\1\32\1\30"+
    "\1\32\1\30\1\0\1\32\1\30\1\32\1\30\14\0\1\32\1\30"+
    "\1\32\1\30\1\32\1\30\1\32\1\30\1\32\1\30\1\32\115\0"+
    "\3\30\u5305\0\7\30\14\0\5\30\u03e7\0\1\11\41\0\32\32\6\0"+
    "\32\30\245\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\1\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\2\5\0\1\17\1\20\5\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[30];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\33\0\66\0\121\0\33\0\33\0\154\0\33"+
    "\0\33\0\207\0\242\0\33\0\33\0\33\0\33\0\33"+
    "\0\275\0\330\0\363\0\u010e\0\u0129\0\u0144\0\u015f\0\33"+
    "\0\33\0\u017a\0\u0195\0\u01b0\0\u01cb\0\u01e6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[30];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\2\1\11\1\12\4\13\1\14\4\3\1\15\1\16"+
    "\1\17\1\20\2\13\1\3\34\0\1\21\11\0\4\22"+
    "\1\0\4\21\4\0\2\22\1\21\2\0\1\4\36\0"+
    "\1\23\1\24\24\0\1\25\11\0\1\26\3\25\1\0"+
    "\1\27\3\25\5\0\1\25\14\0\4\13\11\0\2\13"+
    "\2\0\1\21\16\0\4\21\6\0\1\21\13\0\4\22"+
    "\11\0\2\22\10\0\1\24\23\0\10\24\1\30\22\24"+
    "\1\0\1\25\11\0\4\25\1\31\4\25\5\0\1\25"+
    "\2\0\1\25\11\0\1\25\1\32\2\25\1\31\4\25"+
    "\5\0\1\25\2\0\1\25\11\0\4\25\1\31\1\25"+
    "\1\33\2\25\5\0\1\25\2\0\1\25\11\0\2\25"+
    "\1\34\1\25\1\31\4\25\5\0\1\25\2\0\1\25"+
    "\11\0\4\25\1\31\2\25\1\35\1\25\5\0\1\25"+
    "\2\0\1\25\11\0\3\25\1\36\1\31\4\25\5\0"+
    "\1\25\2\0\1\25\11\0\4\25\1\31\3\25\1\36"+
    "\5\0\1\25\2\0\1\25\11\0\4\25\1\11\4\25"+
    "\5\0\1\25\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[513];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\1\1\2\11\2\1\5\11"+
    "\2\1\5\0\2\11\5\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[30];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private JCas cas;
        
    public void setJCas(JCas cas) {
        this.cas = cas;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SeedLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  SeedLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2624) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public AnnotationFS yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { NUM t = new NUM(cas);
                t.setBegin(yychar);
                t.setEnd(yychar + yytext().length());
                
                return t;
          }
        case 17: break;
        case 13: 
          { QUESTION t = new QUESTION(cas);
                t.setBegin(yychar);
                t.setEnd(yychar + yytext().length());
                
                return t;
          }
        case 18: break;
        case 8: 
          { SW t = new SW(cas);
                t.setBegin(yychar);
                t.setEnd(yychar + yytext().length());
                
                return t;
          }
        case 19: break;
        case 4: 
          { SPACE t = new SPACE(cas);
                t.setBegin(yychar);
                t.setEnd(yychar + yytext().length());
                
                return t;
          }
        case 20: break;
        case 11: 
          { COMMA t = new COMMA(cas);
                t.setBegin(yychar);
                t.setEnd(yychar + yytext().length());
                
                return t;
          }
        case 21: break;
        case 1: 
          { SPECIAL t = new SPECIAL(cas);
                t.setBegin(yychar);
                t.setEnd(yychar + yytext().length());
                
                return t;
          }
        case 22: break;
        case 15: 
          { MARKUP t = new MARKUP(cas);
                t.setBegin(yychar);
                t.setEnd(yychar + yytext().length());
                
                return t;
          }
        case 23: break;
        case 6: 
          { EXCLAMATION t = new EXCLAMATION(cas);
                t.setBegin(yychar);
                t.setEnd(yychar + yytext().length());
                
                return t;
          }
        case 24: break;
        case 7: 
          { NBSP t = new NBSP(cas);
                t.setBegin(yychar);
                t.setEnd(yychar + yytext().length());
                
                return t;
          }
        case 25: break;
        case 14: 
          { CAP t = new CAP(cas);
                t.setBegin(yychar);
                t.setEnd(yychar + yytext().length());
                
                return t;
          }
        case 26: break;
        case 12: 
          { PERIOD t = new PERIOD(cas);
                t.setBegin(yychar);
                t.setEnd(yychar + yytext().length());
                
                return t;
          }
        case 27: break;
        case 5: 
          { BREAK t = new BREAK(cas);
                t.setBegin(yychar);
                t.setEnd(yychar + yytext().length());
                
                return t;
          }
        case 28: break;
        case 2: 
          { CW t = new CW(cas);
                t.setBegin(yychar);
                t.setEnd(yychar + yytext().length());
                
                return t;
          }
        case 29: break;
        case 10: 
          { COLON t = new COLON(cas);
                t.setBegin(yychar);
                t.setEnd(yychar + yytext().length());
                
                return t;
          }
        case 30: break;
        case 9: 
          { SEMICOLON t = new SEMICOLON(cas);
                t.setBegin(yychar);
                t.setEnd(yychar + yytext().length());
                
                return t;
          }
        case 31: break;
        case 16: 
          { AMP t = new AMP(cas);
                t.setBegin(yychar);
                t.setEnd(yychar + yytext().length());
                
                return t;
          }
        case 32: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return null;
            }
            case 31: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
